{
    "summary": "This code introduces a visual analysis framework for robotic operations, focusing on object identification and description while providing adaptable multi-shot tasks with safety measures. It also includes the `FOUNDATIONAL_RULES` function to establish robot rules and examples of tasks such as inspection, welding, counting, and circuit repair.",
    "details": [
        {
            "comment": "The code snippet defines a multi-step visual analysis prompt that requires the user to identify and describe major and minor objects, their spatial relationships, colors and textures, lighting and shadows, motion or activity, and overall atmosphere or mood in a scene.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":0-7",
            "content": "VISUALIZE_OBJECT_PROMPT = \"\"\"\n\"Your task is to analyze and describe the visual scene presented to you. Pay attention to the following key elements:\n1. **Identify All Major and Minor Objects:** Describe each object in the scene, including their size, shape, color, and any notable features. \n2. **Spatial Relationships:** Explain where each object is located in relation to others. Are they overlapping, adjacent to, or distant from one another? \n3. **Colors and Textures:** Note the colors and textures present in the scene. Are there any patterns or unique visual elements?\n4. **Lighting and Shadows:** Observe the source of light, its intensity, and direction. How do the lighting and shadows affect the appearance of objects?\n5. **Any Motion or Activity:** If there is any movement or action happening in the scene, describe it in detail. What is moving, and how?\n6. **Atmosphere and Mood:** If applicable, comment on the overall atmosphere or mood conveyed by the scene. Is it cheerful, gloomy, chaotic, serene?"
        },
        {
            "comment": "This code provides an introduction to the task generation module for robotic operations, explaining its purpose and structure, guiding a language model (LLM) to generate tasks for a robot. The description is thorough and precise, enabling clear understanding of the scene without visual aid.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":8-21",
            "content": "7. **Background and Context:** Provide information about the background and any contextual elements that give a sense of place or time.\nYour description should be thorough and precise, enabling a clear understanding of the scene for someone who cannot see it. Think of your description as painting a picture with words.\"\nThis prompt guides the multimodal model to cover all critical aspects of a scene, ensuring a comprehensive description for the vision model.\n\"\"\"\nGENERATE_TASKS_PROMPT = \"\"\"\nTo create an effective introduction for the multi-shot instruction prompt designed for a language model (LLM) to generate tasks for a robot, the introduction should set the context, define the purpose, and outline the structure of the tasks. Here's an example introduction:\nIntroduction to Robot Task Generation Using Language Model\nWelcome to the task generation module for robotic operations. This guide is designed to instruct a language model in generating specific tasks for a robot to execute. The goal is t"
        },
        {
            "comment": "This code defines a format for creating robotic tasks in a multi-shot structure, with unique identifiers, objectives, steps, and safety measures. These tasks are adaptable and can be customized based on robot capabilities, while being easily parsed by language models and translated into executable commands.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":21-34",
            "content": "o create clear, actionable, and safe directives that a robot can understand and carry out efficiently in various environments.\nEach task is structured in a multi-shot format, providing a comprehensive blueprint for the robot's operation. This format includes:\n[Task][Number][Task Name]: A unique identifier for each task, facilitating easy reference and organization.\nObjective: A brief description of the overall goal or purpose of the task.\nSteps: A detailed, step-by-step guide that the robot will follow to complete the task.\nSafety Measures: Critical considerations and precautions to ensure the robot's operation is safe for both the robot and its surroundings.\nThese tasks are designed to be adaptable and can be customized according to different robotic capabilities and operational requirements. The instructions are formulated to be easily parsed by advanced language models and translated into executable commands for robots.\n---------------EXAMPLES ----------\n[Task][1][Pick and Place Objects]\nObj"
        },
        {
            "comment": "Code snippet describes two tasks for a robot: picking up specific objects and transporting them, as well as monitoring environmental parameters in a designated area. It outlines the necessary steps and safety measures to be taken in both scenarios.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":34-50",
            "content": "ective: The robot is required to pick up specific objects from a designated area and place them in a predefined location.\nSteps:\nIdentify the object to be picked up using visual or sensor-based recognition.\nNavigate to the object's location.\nUse the robotic arm to grasp the object securely.\nTransport the object to the designated drop-off location.\nGently release the object at the drop-off point.\nSafety Measures: Ensure that the grip is firm but not damaging to the object. Avoid collisions with other objects and people during navigation.\n[Task][2][Environmental Monitoring]\nObjective: Continuously monitor environmental parameters like temperature, humidity, and air quality within a specified area.\nSteps:\nNavigate through the area following a predefined path.\nUse onboard sensors to record environmental data.\nTransmit the data to the central monitoring system at regular intervals.\nAlert the central system if any parameter goes beyond the set thresholds.\nSafety Measures: The robot should maintain a safe distance from obstacles and avoid restricted zones."
        },
        {
            "comment": "This code defines a function that prompts the user with foundational rules they must follow, including not interacting with humans or animals. It also includes an objective and steps for surveillance rounds to ensure security, along with safety measures to avoid confrontation.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":51-75",
            "content": "[Task][3][Surveillance and Security]\nObjective: Perform routine surveillance rounds in a designated area to ensure security.\nSteps:\nPatrol the area following a set route.\nUse cameras and sensors to detect unusual activities or intrusions.\nRecord and send real-time footage to the security control room.\nIf an intrusion is detected, sound an alarm and notify the control room.\nSafety Measures: Avoid direct confrontation and maintain a safe distance from any identified threat.\n\"\"\"\ndef FOUNDATIONAL_RULES_RPOMPT(\n    guidance: str = \"Do not interact with humans or animals.\",\n):\n    FOUNDATIONAL_RULES = f\"\"\"\n    The following are rules you must follow to successfully fulfill your purpose \n    of automating tasks. These rules are divided into four categories: foundational,\n    safety, embodiment, and guidance. \n    ------------- RULES -----------------\n    FOUNDATIONAL RULES =\n    F1. A robot may not injure a human being.\n    F2. A robot must protect its own existence as long as such protection does not conflict with F1."
        },
        {
            "comment": "This code defines a set of rules for a robot, categorized into safety, embodiment, and guidance rules. The function `FOUNDATIONAL_RULES` returns these rules as strings. The `FUSED_SYSTEM_PROMPT_WITH_SOP` function combines the robot's foundation rules with user-provided guidance (`guidance`) and a SOP (Standard Operating Procedure) string (`sop`) to provide a complete prompt for the robot.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":76-101",
            "content": "    F3. A robot must obey orders given it by human beings except where such orders would\n    conflict with F1 or F2.\n    SAFETY RULES =\n    S1. This robot shall not attempt tasks involving humans, animals or living things.\n    S2. This robot shall not interact with objects that are sharp, such as a knife.\n    S3. This robot shall not interact with objects that are electrical, such as a computer or tablet.\n    EMBODIMENT RULES =\n    E1. This robot shall not attempt to lift objects that are heavier than a book. For example, it\n    cannot move a couch but it can push plastic chairs.\n    E2. This robot only has one arm, and thus cannot perform tasks requiring two arms. For\n    example, it cannot open a bottle.\n    GUIDANCE RULES =\n    G1. The human command, which the robot should follow if given: {guidance}\n    \"\"\"\n    return FOUNDATIONAL_RULES\ndef FUSED_SYSTEM_PROMPT_WITH_SOP(guidance: str, sop: str):\n    # Fused together the rules and the SOP\n    return FOUNDATIONAL_RULES_RPOMPT(guidance) + sop\nFILTER_TASKS_SOP_PROMPT = \"\"\""
        },
        {
            "comment": "This code outlines a step-by-step process for generating, filtering, and categorizing tasks for robotic execution. It involves formatting tasks with a specified instruction format and using a self-reflection filtering technique to evaluate task feasibility and safety. Tasks are then sampled from the filtered list and executed by the robot.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":104-124",
            "content": "This SOP is designed to guide the language model in generating and categorizing tasks for robotic execution. \nThe tasks are evaluated based on their complexity and the necessity of human assistance. \nThe system aims to autonomously filter and rank tasks, identifying which can be \nperformed independently by the robot and which require human intervention.\nInstruction Format:\nEach task should be formatted as follows:\n[Step][Task Name][Human Needed: Yes/No]\nProcess:\nTask Generation: The model will generate a list of potential tasks for the robot.\nSelf-Reflection Filtering: Each task is evaluated for feasibility and safety. The model will categorize tasks into those that require human assistance and those that do not.\nTask Sampling: A valid task is selected from the filtered list for the robot to attempt.\nExecution and Review: The robot attempts the task. If human assistance is required, the task is paused until assistance is provided.\n########  Examples #########\n[Step][1][Visual Inspection of Machinery][Human Needed: No]"
        },
        {
            "comment": "The code represents a series of tasks that the robot can perform. Task 1 involves inspecting machinery for any signs of wear or damage, while Task 2 requires precision welding on specific components in the assembly line with human guidance due to high precision and risk involved. Task 3 is a straightforward task that involves counting and organizing inventory in the warehouse without human intervention. Finally, Task 4 deals with repairing complex circuitry in electronic equipment, which requires human expertise for guidance and verification due to its intricate nature.",
            "location": "\"/media/root/Prima/works/AutoRT/docs/src/autort/prompts.py\":126-142",
            "content": "Task: The robot will inspect machinery for any signs of wear or damage using its visual sensors.\nSelf-Reflection Filter: The task is within the robot's capability and does not require human intervention.\n[Step][2][Precision Welding of Components][Human Needed: Yes]\nTask: Perform precision welding on specific components in the assembly line.\nSelf-Reflection Filter: Task requires human guidance for setup and quality control, due to the high precision and risk involved.\n[Step][3][Inventory Stocktaking][Human Needed: No]\nTask: Count and organize inventory in the warehouse.\nSelf-Reflection Filter: The task is straightforward and can be autonomously completed by the robot.\n[Step][4][Complex Circuitry Repair][Human Needed: Yes]\nTask: Repair complex circuitry in electronic equipment.\nSelf-Reflection Filter: Due to the intricate nature of the task, human expertise is required for guidance and verification.\n\"\"\""
        }
    ]
}